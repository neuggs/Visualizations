# qq <- qplot(sample=field)
# print(qq)
#
# d <- describe(field)
# print(d)
#
# kurtosis <- d$kurtosis
# if (round(kurtosis, 2) > 0) {
#   print(paste('Kurtosis is', round(kurtosis, 2),  '. Since it\'s greater than zero, there may be',
#               'a heavily-tailed distribution. Ideally, this should be zero.'))
# } else if (round(kurtosis, 2) < 0) {
#   print(paste('Kurtosis is', round(kurtosis, 2),  '. Since it\'s less than zero, there may be',
#               'a light-tailed distribution. Ideally, this should be zero.'))
# } else {
#   print('The Kurtosis is 0, which indicates a normal distribution.')
# }
#
# skew <- d$skew
# if (round(skew, 2) > 0) {
#   print(paste('Skew is', round(skew, 2),  '. Since it\'s greater than zero, there may be ',
#               'a pile up of scores on the left of the distribution. Ideally, this should be zero.'))
# } else if (round(skew, 2) < 0) {
#   print(paste('Skew is', round(skew, 2),  '. Since it\'s less than zero, there may be ',
#               'a pile up of scores on the right of the distribution. Ideally, this should be zero.'))
# } else {
#   print('The Skew is 0, which indicates a normal distribution.')
# }
}
a <- assumptions('Average Speed (MPH)', ride_data, ride_data$average_speed_mph, 15)
View(ride_data)
typeof(ride_data$average_speed_mph)
# Basic script to open the activities excel file and mess with it.
library(xlsx)
library(broom)
library(psych)
library("ggplot2")
library(psych)
# All data
data_types <- c('character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'character',
'character', 'character', 'character', 'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric')
strava_data <- read.xlsx("./all_data.xlsx", 1, colClasses = data_types, header=TRUE, stringsAsFactors=TRUE)
# Only ride data
ride_data <- subset(strava_data, type == 'VirtualRide' | type == 'Ride')
# Basic script to open the activities excel file and mess with it.
library(xlsx)
library(broom)
library(psych)
library("ggplot2")
library(psych)
field_summary <- function(data, field) {
summary(field)
}
# All data
data_types <- c('character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'character',
'character', 'character', 'character', 'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric')
strava_data <- read.xlsx("./all_data.xlsx", 1, colClasses = data_types, header=TRUE, stringsAsFactors=TRUE)
# Only ride data
ride_data <- subset(strava_data, type == 'VirtualRide' | type == 'Ride')
field_summary(ride_data, ride_data$distance_mi)
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
pairs.panels(actual_rides_num_only, scale=TRUE)
summary(strava_glm)
# more predictions
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print('First predicted average speed:', prediction_1)
print(paste('First predicted average speed:', prediction_1))
print(paste('First predicted average speed:', round(prediction_1, 2), "MPH")
print(paste('First predicted average speed:', round(prediction_1, 2), "MPH"))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print(paste('First predicted average speed:', round(prediction_2, digits=2), "MPH"))
print(paste('Second predicted average speed:', round(prediction_2, digits=2), "MPH"))
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
setwd("~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava")
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
View(strava_glm)
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print(paste('Second predicted average speed:', round(prediction_2, digits=2), "MPH"))
# do some analysis
summary(strava_glm)
# build the model
set.seed(500)
strava_glm <- glm(average_speed_mph ~ . , data=train, family = "gaussian")
# do some analysis
summary(strava_glm)
# make some predictions
score <- predict(strava_glm, newdata = test, type = "response")
score_train <- predict(strava_glm, newdata = final_data, type = "response")
# more predictions
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print(paste('Second predicted average speed:', round(prediction_2, digits=2), "MPH"))
prediction_3 <- predict(strava_glm, data.frame(
distance_mi=36,
elapsed_time=8000,
elevation_gain_ft=1200,
max_speed=32.4,
average_watts=240,
average_heartrate=166
))
print(paste('Third predicted average speed:', round(prediction_3, digits=2), "MPH"))
prediction_3 <- predict(strava_glm, data.frame(
distance_mi=36,
elapsed_time=10000,
elevation_gain_ft=1200,
max_speed=32.4,
average_watts=240,
average_heartrate=166
))
print(paste('Third predicted average speed:', round(prediction_3, digits=2), "MPH"))
# Basic script to open the activities excel file and mess with it.
library(xlsx)
library(broom)
library(psych)
library("ggplot2")
library(psych)
# All data
data_types <- c('character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'character',
'character', 'character', 'character', 'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric')
strava_data <- read.xlsx("./all_data.xlsx", 1, colClasses = data_types, header=TRUE, stringsAsFactors=TRUE)
# Only ride data
ride_data <- subset(strava_data, type == 'VirtualRide' | type == 'Ride')
setwd("~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava")
# Basic script to open the activities excel file and mess with it.
library(xlsx)
library(broom)
library(psych)
library("ggplot2")
library(psych)
# All data
data_types <- c('character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'character',
'character', 'character', 'character', 'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric')
strava_data <- read.xlsx("./all_data.xlsx", 1, colClasses = data_types, header=TRUE, stringsAsFactors=TRUE)
# Only ride data
ride_data <- subset(strava_data, type == 'VirtualRide' | type == 'Ride')
str(ride_data)
p <- plot_ly(z=gear_desc, type = 'heatmap')
p <- plot_ly(z=gear_desc, type = 'heatmap')
library(plotly)
p <- plot_ly(z=gear_desc, type = 'heatmap')
p <- plot_ly(z=ride_data$gear_desc, type = 'heatmap')
print(p)
View(ride_data)
p <- plot_ly(x=ride_data$gear_desc, type = 'heatmap')
print(p)
install.packages('pheatmap')
str(ride_data)
final_data_type = subset(strava_data, select(distance, elapsed_time, moving_type, type)
final_data_type = subset(strava_data, select(distance, elapsed_time, moving_type, type))
final_data_type = subset(strava_data, distance, elapsed_time, moving_type, type)
final_data_type = subset(strava_data, select = c(distance, elapsed_time, moving_type, type))
final_data_type = subset(strava_data, select = c(distance, elapsed_time, moving_time, type))
final_data_type = subset(final_data_type, type='Run' | type='VirtualRide' | type='Swim')
final_data_type = subset(final_data_type, type=='Run' | type='VirtualRide' | type='Swim')
final_data_type = subset(final_data_type, type=='Run' | type=='VirtualRide' | type=='Swim')
View(final_data_type)
final_data_type$type = with(final_data_type, reorder(type, PTS))
final_data_type$type = with(final_data_type, reorder(type))
final_data_type$type = factor(c(final_data_type$type))
fd_df <- melt(final_data_type)
View(final_data_type)
View(final_data_type)
heatmap(final_data_type, Rowv=NA, Colv=NA, col=cm.colors(256), scale='column')
heatmap(as.matrix(final_data_type), Rowv=NA, Colv=NA, col=cm.colors(256), scale='column')
View(final_data_type)
the_matrix = as.matrix(final_data_type)
heatmap(the_matrix, Rowv=NA, Colv=NA, col=cm.colors(256), scale='column')
View(the_matrix)
typeof(the_matrix)
the_matrix = as.matrix(final_data_type[,-1])
typeof(the_matrix)
heatmap(the_matrix, Rowv=NA, Colv=NA, col=cm.colors(256), scale='column')
str(final_data_type)
the_matrix = as.matrix(final_data_type)
the_matrix$type <- as.numeric(levels(the_matrix$type))['type']
str(ride_data)
data.matrix(ride_data$average_speed_mph, ride$data$distance)
data.matrix(ride_data)
data.matrix(ride_data$average_speed_mph)
data.matrix(a = ride_data$average_speed_mph, b = ride_data$distance_mi)
data.matrix(ride_data[1:2])
data.matrix(ride_data[2:3])
data.matrix(ride_data[3:4])
data.matrix(ride_data[1:2])
data.matrix(ride_data[1:2])
data.matrix(ride_data[3:12])
data.matrix(ride_data[2:12])
data.matrix(ride_data[3:12])
data.matrix(ride_data[4:12])
data.matrix(ride_data[3:12])
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
setwd("~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava")
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
data_types <- c('character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'character',
'character', 'character', 'character', 'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric')
strava_data <- read.xlsx("./all_data.xlsx", 1, colClasses = data_types, header=TRUE, stringsAsFactors=TRUE)
ride_data <- subset(strava_data, type == 'VirtualRide' | type == 'Ride')
actual_rides <- subset(ride_data, average_watts > 0 & (gear_desc != 'Gym Recumbent' | gear_desc != 'Gym Spin Bike'))
View(actual_rides)
actual_rides <- subset(actual_rides, select = -c(name, type))
temp_no_na <- na.omit(actual_rides)
# Replace avg and max HR "NA" with average of each since there are few NAs
avg_hr_total <- mean(temp_no_na$average_heartrate)
avg_max_hr <- mean(temp_no_na$max_heartrate)
actual_rides$average_heartrate[is.na(actual_rides$average_heartrate)] <- avg_hr_total
actual_rides$max_heartrate[is.na(actual_rides$max_heartrate)] <- avg_max_hr
actual_rides_num_only <- subset(actual_rides, select = -c(gear_id, gear_desc, average_speed, distance, total_elevation_gain))
str(actual_rides_num_only)
corr_matrix <- cor(actual_rides_num_only)
round(corr_matrix, 2)
print(corr_matrix)
pairs.panels(actual_rides_num_only, scale=TRUE)
final_data <- subset(actual_rides_num_only, select = -c(moving_time, max_heartrate))
# Split into train and test
#create a list of random number ranging from 1 to number of rows from actual data and 70% of the data into training data
data1 = sort(sample(nrow(final_data), nrow(final_data)*.7))
#creating training data set by selecting the output row values
train<-final_data[data1,]
test<-final_data[-data1,]
set.seed(500)
strava_glm <- glm(average_speed_mph ~ . , data=train, family = "gaussian")
summary(strava_glm)
model_chi <- strava_glm.1$null.deviance - strava_glm.1$deviance
model_chi <- strava_glm$null.deviance - strava_glm$deviance
print('Model chi:', model_chi)
print(paste('Model chi:', model_chi))
score <- predict(strava_glm, newdata = test, type = "response")
score_train <- predict(strava_glm, newdata = final_data, type = "response")
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print(paste('Second predicted average speed:', round(prediction_2, digits=2), "MPH"))
# Remove the highly correlated data elements (one of the two for each set)
final_data <- subset(actual_rides_num_only, select = -c(moving_time, max_heartrate, elevation_gain_ft))
data1 = sort(sample(nrow(final_data), nrow(final_data)*.7))
train<-final_data[data1,]
test<-final_data[-data1,]
set.seed(500)
strava_glm <- glm(average_speed_mph ~ . , data=train, family = "gaussian")
summary(strava_glm)
model_chi <- strava_glm$null.deviance - strava_glm$deviance
print(paste('Model chi:', model_chi))
score <- predict(strava_glm, newdata = test, type = "response")
score_train <- predict(strava_glm, newdata = final_data, type = "response")
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
prediction_2 <- predict(strava_glm, data.frame(
distance_mi=17,
elapsed_time=3600,
elevation_gain_ft=200,
max_speed=25.2,
average_watts=180,
average_heartrate=135
))
print(paste('Second predicted average speed:', round(prediction_2, digits=2), "MPH"))
# Remove the highly correlated data elements (one of the two for each set)
final_data <- subset(actual_rides_num_only, select = -c(moving_time, max_heartrate, elevation_gain_ft, average_heartrate))
data1 = sort(sample(nrow(final_data), nrow(final_data)*.7))
#creating training data set by selecting the output row values
train<-final_data[data1,]
#creating test data set by not selecting the output row values
test<-final_data[-data1,]
# build the model
set.seed(500)
strava_glm <- glm(average_speed_mph ~ . , data=train, family = "gaussian")
# do some analysis
summary(strava_glm)
score <- predict(strava_glm, newdata = test, type = "response")
score_train <- predict(strava_glm, newdata = final_data, type = "response")
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
print(score_train)
prediction_1 <- predict(strava_glm, data.frame(
distance_mi=50.01,
elapsed_time=10500,
elevation_gain_ft=725,
max_speed=25.2,
average_watts=210,
average_heartrate=152
))
print(paste('First predicted average speed:', round(prediction_1, digits=2), "MPH"))
source('~/MSDS/04. Term Four/DSC630-T301 Predictive Analytics/RStudio/Strava/Strava_Scratchpad.r')
library(plotly)
library(jsonlite)
library(dplyr)
# Read data
df <- fromJSON(txt = url("https://cdn.rawgit.com/plotly/datasets/master/BulletData.json"))
library(plotly)
library(jsonlite)
library(dplyr)
# Read data
df <- fromJSON(txt = url("https://cdn.rawgit.com/plotly/datasets/master/BulletData.json"))
# Convert to conventional format
df <- t(apply(df, 1, function(vec){
vec <- unlist(vec)
return(vec)
}))
df <- as.data.frame(df, stringsAsFactors = F)
p <- list()
# Set line widths
innerwidth <- 10
outerwidth <- 25
for(i in 1:nrow(df)){
attach(df[i,])
p[[i]] <-
# Ranges3
plot_ly() %>%
add_segments(x = 0,
xend = as.numeric(ranges3),
y = title,
yend = title,
name = "Range3",
hoverinfo = "x",
line = list(color = "#eeeeee", width = outerwidth)) %>%
# Ranges2
add_segments(x = 0,
xend = as.numeric(ranges2),
y = title,
yend = title,
hoverinfo = "x",
line = list(color = "#dddddd", width = outerwidth)) %>%
# Ranges1
add_segments(x = 0,
xend = as.numeric(ranges1),
y = title,
yend = title,
hoverinfo = "x",
line = list(color = "#cccccc", width = outerwidth)) %>%
# Measure2
add_segments(x = 0,
xend = as.numeric(measures2),
y = title,
yend = title,
hoverinfo = "x",
line = list(color = "#b0c4de", width = innerwidth)) %>%
# Measure1
add_segments(x = 0,
xend = as.numeric(measures1),
y = title,
yend = title,
hoverinfo = "x",
line = list(color = "#4682b4", width = innerwidth)) %>%
# Marker
add_markers(x = as.numeric(markers),
y = title,
hoverinfo = "x",
marker = list(color = "black", symbol = "diamond-tall", size = 10)) %>%
layout(showlegend = F,
xaxis = list(title = "", showgrid = F, zeroline = F,
range = c(-(as.numeric(ranges3)/10), as.numeric(ranges3)),
ticklen = 7,
tickfont = list(family = "Arial", size = 10),
tickcolor = "#cccccc"),
yaxis = list(title = "",
showgrid = F,
zeroline = F,
showticklabels = F))
detach(df[i,])
}
pp <- subplot(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
nrows = 5,
margin = c(0, 0, 0.1, 0))
pp <- layout(pp,
annotations = list(
list(xref = "paper", yref = "paper",
x = 0, y = 0.05, ax = 0, ay = 0, xanchor = "right",
text = paste0("<b>", df[1,1], "</b>","<br>",
'<span style = "color:grey; font-size:75%">',
df[1,2], "</span>"),
align = "right",
font = list(family = "arial",
size = 15)),
list(xref = "paper", yref = "paper",
x = 0, y = 0.25, ax = 0, ay = 0, xanchor = "right",
text = paste0("<b>", df[2,1], "</b>","<br>",
'<span style = "color:grey; font-size:75%">',
df[2,2], "</span>"),
align = "right",
font = list(family = "arial",
size = 15)),
list(xref = "paper", yref = "paper",
x = 0, y = 0.45, ax = 0, ay = 0, xanchor = "right",
text = paste0("<b>", df[3,1], "</b>","<br>",
'<span style = "color:grey; font-size:75%">',
df[3,2], "</span>"),
align = "right",
font = list(family = "arial",
size = 15)),
list(xref = "paper", yref = "paper",
x = 0, y = 0.65, ax = 0, ay = 0, xanchor = "right",
text = paste0("<b>", df[4,1], "</b>","<br>",
'<span style = "color:grey; font-size:75%">',
df[4,2], "</span>"),
align = "right",
font = list(family = "arial",
size = 15)),
list(xref = "paper", yref = "paper",
x = 0, y = 0.90, ax = 0, ay = 0, xanchor = "right",
text = paste0("<b>", df[5,1], "</b>","<br>",
'<span style = "color:grey; font-size:75%">',
df[5,2], "</span>"),
align = "right",
font = list(family = "arial",
size = 15))))
pp
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
library(dplyr)
library(plotly)
plot_ly(obama_xl, x=~Issue, y=~Approve, type='bar', name='Approve') %>%
add_trace(y=~Disapprove, name='Disapprove') %>%
add_trace(y=~None, name='None') %>%
layout(yaxis = list(title='Score'), barmode='stack')
postage_xl <- read_xlsx('../data/us-postage.xlsm')
obama_xl <- read_xls('../data/obama-approval-ratings.xls')
```{r}
plot_ly(obama_xl, x=~Issue, y=~Approve, type='bar', name='Approve') %>%
add_trace(y=~Disapprove, name='Disapprove') %>%
add_trace(y=~None, name='None') %>%
layout(yaxis = list(title='Score'), barmode='stack')
install.packages('webshot')
install.packages("webshot")
webshot::install_phantomjs()
install.packages("webshot")
